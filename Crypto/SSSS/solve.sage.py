

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_15 = Integer(15); _sage_const_1 = Integer(1)#!/usr/bin/env python3

import os
os.environ['TERM'] = 'linux'

from pwn import *

io = process(['python3','ssss.py'])
#io = remote('ctfi.ng',31555)

io.recvline()
p = _sage_const_2 **_sage_const_255  - _sage_const_19 
k = _sage_const_15 
R = GF(p)['x0']; (x0,) = R._first_ngens(1)


def query():
    io.sendline(str(k).encode())
    g = _sage_const_2 
    while pow(g,(p-_sage_const_1 )//k,p) == _sage_const_1 :
        g+=_sage_const_1     
    g = pow(g,(p-_sage_const_1 )//k,p)
    
    #assert pow(g,k,p) == 1
    
    shares = []
    for i in range(k-_sage_const_1 ):
        log.info(f'{i = }')
        x = pow(g,i,p)
        io.sendline(str(x).encode())
        y = int(io.recvline())
        shares.append((x,y))
        
    return list(R.lagrange_polynomial(shares))

A = query()
log.info(f'{A = }')
io.interactive()

# B = query()

# for secret in A:
#     if secret in B:
#         io.sendline(str(secret).encode())
#         log.info(f'{io.recvline().decode().rstrip() = }')

